version: 2.1

commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  install-kubectl:
    description: Install Kubectl
    steps:
      - run:
          name: Install Kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
            export PATH=$PATH:/usr/local/bin/kubectl

jobs:
  test:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

  upload-docker:
    docker:
      - image: circleci/golang:1.15
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build docker container
          command: |
            docker build --tag=$DOCKER_IMAGE_NAME .
            docker image ls
      - run:
          name: Upload Docker to Dockerhub
          command: |
            echo "Docker ID and Image: $DOCKER_IMAGE_NAME"
            docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
            docker tag $DOCKER_IMAGE_NAME $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:$DOCKER_PATH
            docker push $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:$DOCKER_PATH

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure EKS network exists
          command: |
            aws cloudformation deploy \
              --template-file filesCloudFormation/network.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-network" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://filesCloudFormation/network-parameters.json
      - run:
          name: Ensure EKS Cluster exists
          command: |
            aws cloudformation deploy \
              --template-file filesCloudFormation/cluster.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-cluster" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://filesCloudFormation/cluster-parameters.json \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Node must exists
          command: |
            aws cloudformation deploy \
              --template-file filesCloudFormation/node.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-nodegroup" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://filesCloudFormation/node-parameters.json \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Ensure management instances exists
          command: |
            aws cloudformation deploy \
              --template-file filesCloudFormation/management.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-management" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://filesCloudFormation/management-parameters.json \
              --output text >> ~/project/ansible/checkIfDeployed.txt
            cat ~/project/ansible/checkIfDeployed.txt
      - run:
          name: Extract the IPs of the management instances for Ansible
          command: |
            echo [management] > ~/project/ansible/inventory.txt
            aws ec2 describe-instances \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=${ENVIRONMENT_NAME}-management*" \
              --output text >> ~/project/ansible/inventory.txt
            cat ~/project/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/ansible/inventory.txt
            - project/ansible/checkIfDeployed.txt

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install-kubectl
      - add_ssh_keys:
          fingerprints: [78:1f:07:d7:12:f1:9a:c1:b5:8a:40:e4:52:fc:2e:69]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            echo [management] > ~/project/ansible/inventory.txt
            aws ec2 describe-instances \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=${ENVIRONMENT_NAME}-management*" \
              --output text >> ~/project/ansible/inventory.txt
            cat ~/project/ansible/inventory.txt
            ansible-playbook -i ~/project/ansible/inventory.txt ~/project/ansible/configure-server.yml

  configuration-cluster:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install-kubectl
      - add_ssh_keys:
          fingerprints: [78:1f:07:d7:12:f1:9a:c1:b5:8a:40:e4:52:fc:2e:69]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |        
            cat ~/project/ansible/inventory.txt
            cd ansible
            ansible-playbook -i ~/project/ansible/inventory.txt ~/project/ansible/configure-cluster.yml
      - run:
          name: Wait for LoadBalancer's domain to become reachable
          command: |
            cat ~/project/ansible/inventory.txt
            sleep 60
      - run:
          name: Display the LoadBalancer DNS name
          command: |
            cat ~/project/ansible/inventory.txt
            cd ansible
            ansible-playbook -i ~/project/ansible/inventory.txt ~/project/ansible/loadbalancer_dns.yml
            cat ~/project/ansible/loadbalancer_dns.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/ansible/loadbalancer_dns.txt

  deploy-docker:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - add_ssh_keys:
          fingerprints: [78:1f:07:d7:12:f1:9a:c1:b5:8a:40:e4:52:fc:2e:69]
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy Docker Image
          command: |
            cat ~/project/ansible/inventory.txt
            cd ansible
            ansible-playbook -i ~/project/ansible/inventory.txt ~/project/ansible/deploy-app.yml

workflows:
  default:
    jobs:
      - test
      - upload-docker:
          requires:
            - test-build
          filters:
            branches:
              only: [master]
      - deploy-infrastructure:
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - configuration-cluster:
          requires:
            - configure-infrastructure
            - upload-docker
      - deploy-docker:
          requires:
            - configure-cluster